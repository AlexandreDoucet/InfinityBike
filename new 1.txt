// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'

// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

Shader "Hidden/Show Depth"
{
	Properties
	{
		_Color("Color", Color) = (1,1,1,1)
		_Radius("Radius",Float) = 1
		_Center("Center",Vector) = (0,0,0,0)
	
	}

		SubShader
	{
		Tags
		{
			"RenderType" = "Opaque"
		}

		ZWrite On

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

			float4 _Center;
			float _Radius;
			struct appdata
			{
				float4 vertex : POSITION;
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
				float depth : DEPTH;
			};

			v2f vert(appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				//o.vertex = mul(unity_ObjectToWorld, v.vertex);
				float4 distanceVect = (o.vertex.x - _Center.x, o.vertex.y - _Center.y, o.vertex.z - _Center.z,0);
				float length = distanceVect.x*distanceVect.x + distanceVect.y* distanceVect.y + distanceVect.z* distanceVect.z;
				if (lenght > _Radius)
				{
				}


				o.depth = -mul(UNITY_MATRIX_MV, v.vertex).z *_ProjectionParams.w;
				return o;
			}

			half4 _Color;

			fixed4 frag(v2f i) : SV_Target
			{
				float invert = 1 - i.depth;


				return fixed4(invert, invert, invert, 1) * _Color;
			}
			ENDCG
		}
	}
		/*
	SubShader
	{
		Tags
		{
			"RenderType" = "Transparent"
		}

		ZWrite Off
		Blend SrcAlpha OneMinusSrcAlpha

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

				struct appdata
			{
				float4 vertex : POSITION;
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
			};

			v2f vert(appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				return o;
			}

			half4 _Color;

			fixed4 frag(v2f i) : SV_Target
			{
				return _Color;
			}
			ENDCG
		}
	}*/
}
